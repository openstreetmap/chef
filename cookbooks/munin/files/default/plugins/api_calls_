#!/usr/bin/ruby

require "rubygems"
require "date"
require "hpricot"
require "open-uri"

def uris_from_status(server)
  file = open("http://#{server}/server-status").read
  doc = Hpricot.parse(file)
  tables = doc / "table"
  rows = (tables[1] / "tr")[1..-1]
  data = rows.collect { |r| (r / "td").collect(&:inner_html) }
  # filter where the PID is numeric, status is 'W' and host matches the server
  matching_data = data.select { |r| r[1].to_i.positive? && r[3].match(/W/) && r[11].match(server) }
  # return only the URI part
  matching_data.collect { |r| r[12] }
end

CALL_TYPES = {
  :map => "Map API calls",
  :upload => "Changeset diff uploads",
  :amf => "AMF API calls",
  :history => "Element history fetches",
  :full => "Full element fetches",
  :trkpts => "GPX trackpoints calls",
  :web => "Web site traffic",
  :other => "Other API calls",
}.freeze

def categorise_uri(line)
  uri = line.split(" ")[1]

  case uri
  when %r{api/0\.6/map} then :map
  when %r{api/0\.6/changeset/[0-9]*/upload} then :upload
  when %r{api/0\.6/amf} then :amf
  when %r{api/0\.6/(node|way|relation)/[0-9]*/history} then :history
  when %r{api/0\.6/(node|way|relation)/[0-9]*/full} then :full
  when %r{api/0\.6/trackpoints} then :trkpts
  when %r{api/0\.6/} then :other
  else :web
  end
end

server = $PROGRAM_NAME.match("api_calls_(.*)")[1]

if ARGV[0] == "config"
  puts "graph_title Active requests"
  puts "graph_vlabel Number of requests"
  puts "graph_category api"
  CALL_TYPES.each { |k, v| puts "#{k}.label #{v}" }

else
  counts = uris_from_status(server)
           .collect { |x| categorise_uri(x) }
           .each_with_object({}) do |e, h|
    if h.key? e
      h[e] += 1
    else
      h[e] = 1
    end
  end

  CALL_TYPES.each_key do |type|
    count = counts[type] || 0
    puts "#{type}.value #{count}"
  end
end
