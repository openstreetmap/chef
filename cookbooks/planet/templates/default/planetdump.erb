#!/bin/bash

# DO NOT EDIT - This file is being maintained by Chef

# Exit on error
set -e

# Get the name of the file and the expected pattern
file="$1"
pattern="^osm-([0-9]{4})-([0-9]{2})-([0-9]{2})\.dmp$"

# Give up now if the file isn't a database dump
[[ $file =~ $pattern ]] || exit 0

# Save the year and date from the file name
year="${BASH_REMATCH[1]}"
date="${year:2:2}${BASH_REMATCH[2]}${BASH_REMATCH[3]}"

# Check the lock
if [ -f /tmp/planetdump.lock ]; then
    if [ "$(ps -p `cat /tmp/planetdump.lock` | wc -l)" -gt 1 ]; then
        echo "Error: Another planetdump is running"
        exit 1
    else
        rm /tmp/planetdump.lock
    fi
fi

# Redirect this shell's output to a file. This is so that it
# can be emailed later, since this script is run from incron
# and incron doesn't yet support MAILTO like cron does. The
# command below appears to work in bash as well as dash.
logfile="/tmp/planetdump.log.$$"
exec > "${logfile}" 2>&1

# Create lock file
echo $$ > /tmp/planetdump.lock

# Define cleanup function
function cleanup {
    # Remove the lock file
    rm /tmp/planetdump.lock

    # Send an email with the output, since incron doesn't yet
    # support doing this in the incrontab
    if [[ -s "$logfile" ]]
    then
        mailx -s "Planet dump output: ${file}" zerebubuth@gmail.com < "${logfile}"
    fi

    # Remove the log file
    rm -f "${logfile}"
}

# Remove lock on exit
trap cleanup EXIT

# Change to working directory
cd /store/planetdump

# Cleanup
rm -rf users
rm -rf changesets changeset_tags changeset_comments
rm -rf nodes node_tags
rm -rf ways way_tags way_nodes
rm -rf relations relation_tags relation_members

# Run the dump
time nice -n 19 /opt/planet-dump-ng/planet-dump-ng \
     --max-concurrency=4 \
     -c "pbzip2 -c" -f "/store/backup/${file}" --dense-nodes=1 \
     -C "changesets-${date}.osm.bz2" \
     -D "discussions-${date}.osm.bz2" \
     -x "planet-${date}.osm.bz2" -X "history-${date}.osm.bz2" \
     -p "planet-${date}.osm.pbf" -P "history-${date}.osm.pbf"

# Function to create bittorrent files
function mk_torrent {
  type="$1"
  format="$2"
  web_dir="$3"
  name="${type}-${date}.osm.${format}"
  web_path="${web_dir}/${name}"

  mktorrent -l 22 ${name} \
     -a udp://tracker.opentrackr.org:1337 \
     -a udp://tracker.datacenterlight.ch:6969/announce,http://tracker.datacenterlight.ch:6969/announce \
     -a udp://tracker.torrent.eu.org:451 \
     -a udp://tracker-udp.gbitt.info:80/announce,http://tracker.gbitt.info/announce,https://tracker.gbitt.info/announce \
     -a http://retracker.local/announce \
     -w https://ftp5.gwdg.de/pub/misc/openstreetmap/planet.openstreetmap.org/${web_path} \
     -w https://ftpmirror.your.org/pub/openstreetmap/${web_path} \
     -w https://mirror.init7.net/openstreetmap/${web_path} \
     -w https://planet.openstreetmap.org/${web_path} \
     -w https://free.nchc.org.tw/osm.planet/${web_path} \
     -w https://ftp.fau.de/osm-planet/${web_path} \
     -w https://ftp.spline.de/pub/openstreetmap/${web_path} \
     -w https://osm.openarchive.site/${name} \
     -w https://downloads.opencagedata.com/planet/${name} \
     -c "OpenStreetMap ${type} database dump, licensed under https://opendatacommons.org/licenses/odbl/ by OpenStreetMap contributors" \
     -o ${name}.torrent
}

# Function to create RSS/Atom feed for .torrent files
function mk_rss {
  type="$1"
  format="$2"
  web_dir="$3"
  disk_dir="$4"
  old_pwd="$PWD"
  rss_name="${type}-${format}-rss.xml"
  rss_path="${old_pwd}/${rss_name}"
  rss_baseurl="https://planet.openstreetmap.org"
  rss_dirurl="${rss_baseurl}/${web_dir}"

  cd "${disk_dir}"

  # RSS header
  printf '%s\n' \
     '<?xml version="1.0" encoding="UTF-8"?>' \
     '<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">' \
     '<channel>' > "${rss_path}"
  cat >> "${rss_path}" <<__EOF
     <title>OpenStreetMap ${type} torrent RSS</title>
     <link>${rss_dirurl}</link>
     <atom:link href="${rss_dirurl}/${rss_name}" rel="self" type="application/rss+xml" />
     <description>RSS feed for ${type}.osm.${format}.torrent</description>
     <language>en-us</language>
     <lastBuildDate>`date -R`</lastBuildDate>
__EOF

  # add RSS item for each torrent
  for tf in `ls -1t *.torrent | grep -v latest | head -n 5`
  do
    cat >> "${rss_path}" <<__EOF
     <item>
        <title>${tf}</title>
        <guid>${rss_dirurl}/${tf}</guid>
        <pubDate>`date -R -r ${tf}`</pubDate>
        <category>OpenStreetMap</category>
        <link>${rss_dirurl}/${tf}</link>
        <enclosure url="${rss_dirurl}/${tf}" length="`find -maxdepth 1 -name ${tf%.torrent} -printf "%s"`" type="application/x-bittorrent" />
        <description>OSM Torrent ${tf} (torrent size: `find -maxdepth 1 -name ${tf} -printf "%s"`)</description>
     </item>
__EOF
  done

  # RSS footer
  printf '</channel>\n</rss>\n' >> "${rss_path}"
  cd "${old_pwd}"
  mv "${rss_path}" "${disk_dir}"
}

# Function to install a dump in place
function install_dump {
  type="$1"
  format="$2"
  dir="$3"
  year="$4"
  name="${type}-${date}.osm.${format}"
  latest="${type}-latest.osm.${format}"

  md5sum "${name}" > "${name}.md5"
  mkdir -p "${dir}/${year}"
  test -f "${name}.torrent" && mv "${name}.torrent" "${dir}/${year}"
  mv "${name}" "${name}.md5" "${dir}/${year}"
  ln -sf "${year:-.}/${name}" "${dir}/${latest}"
  rm -f "${dir}/${latest}.md5"
  sed -e "s/${name}/${latest}/" "${dir}/${year}/${name}.md5" > "${dir}/${latest}.md5"
}

# Create *.torrent files
mk_torrent "planet" "pbf" "pbf"
mk_torrent "history" "pbf" "pbf/full-history"

# Move dumps into place
install_dump "changesets" "bz2" "<%= node[:planet][:dump][:xml_directory] %>" "${year}"
install_dump "discussions" "bz2" "<%= node[:planet][:dump][:xml_directory] %>" "${year}"
install_dump "planet" "bz2" "<%= node[:planet][:dump][:xml_directory] %>" "${year}"
install_dump "history" "bz2" "<%= node[:planet][:dump][:xml_history_directory] %>" "${year}"
install_dump "planet" "pbf" "<%= node[:planet][:dump][:pbf_directory] %>"
install_dump "history" "pbf" "<%= node[:planet][:dump][:pbf_history_directory] %>"

# Remove pbf dumps (and associated metadata) older than 90 days
find "<%= node[:planet][:dump][:pbf_directory] %>" "<%= node[:planet][:dump][:pbf_history_directory] %>" -maxdepth 1 -mindepth 1 -type f -mtime +90 \( \
  -iname 'planet-*.pbf' -o -iname 'history-*.pbf' -o \
  -iname 'planet-*.pbf.md5' -o -iname 'history-*.pbf.md5' -o \
  -iname 'planet-*.pbf.torrent' -o -iname 'history-*.pbf.torrent' \
  \) -delete

# Create RSS feed of available *.torrent files to enable automatic seeders
mk_rss "planet" "pbf" "pbf"  "<%= node[:planet][:dump][:pbf_directory] %>"
mk_rss "history" "pbf" "pbf/full-history" "<%= node[:planet][:dump][:pbf_history_directory] %>"
